// Generated by dts-bundle v0.7.3

export { scale, scale as mode, scales, scales as modes, chord, chords, clip, getChordDegrees, getChordsByProgression, progression, arp, midi, };

export const scaleMaps: NVP<string>;
/**
    * Get a list of scales available in Scribbletune.
    * @return {Array}     [example output: ['major', 'minor', 'harmonic minor']]
    */
export const scales: () => string[];
export const chordMaps: NVP<number[]>;
/**
    * Get a list of chords available in Scribbletune.
    * @return {Array}     [example output: ['maj', 'min', 'dim']]
    */
export const chords: () => string[];
/**
    * Generate a scale using static scale maps
    * @param name Name of the scale e.g. C4 major
    */
export const scale: (name: string) => string[];
/**
    * Generate a chord based on static chord maps
    * @param name
    */
export const chord: (name: string) => string[];

export const clip: (params: ClipParams) => NoteObject[];

/**
    * Get the chords that go with a given scale/mode
    * This is useful only in case you want to check what chords work with a scale/mode
    * so that you can come up with chord progressions
    * @param  {String} mode e.g. major
    * @return {Array} e.g.['I', 'ii', 'iii', 'IV', 'V', 'vi', 'viiÂ°']
    */
export const getChordDegrees: (mode: string) => string[];
/**
    * Take the specified scale and degrees and return the chord names for them
    * These can be used as the value for the `notes` param of the `clip` method
    * @param {String} noteOctaveScale e.g. 'C4 major'
    * @param  {String} chordDegress e.g. 'I IV V IV'
    * @return {String} e.g. 'CM FM GM FM'
    */
export const getChordsByProgression: (noteOctaveScale: string, chordDegress: string) => string;
/**
    * Generate a chord progression based on basic music theory
    * where we follow tonic to optionally predominant and then dominant
    * and then randomly to predominant and continue this till we reach `count`
    * @param scaleType e.g. M (for major chord progression), m (for minor chord progression)
    * @param count e.g. 4
    */
export const progression: (scaleType: progressionScale, count?: number) => any[] | undefined;

type Params = {
    count: number;
    order?: string;
    chords: string | any[];
};
/**
  *
  * @param chordsOrParams a string that denotes comma separated chords to be used or an object with additional properties
  * By default, if this is a string, the the count of notes generated is 8 and the order is ascending.
  * For instance arp('CM FM') will result in an array of notes [C4, E4, G4, F4, A4, C4, C5, E5]
  * You can even provide Params as an object.
  * For e.g. arp({count: 8, order: '10325476', chords: 'FM_4 Gm7b5_4 AbM_4 Bbm_4 Cm_5 DbM_5 EbM_5})
  */
export const arp: (chordsOrParams: string | Params) => any;
export {};

/**
  * Take an array of note objects to generate a MIDI file in the same location as this method is called
  * @param  {<Array>NoteObject} notes    Notes are in the format: {note: ['c3'], level: 127, length: 64}
  * @param  {String | null} fileName If a filename is not provided, then `music.mid` is used by default
  * If `null` is passed for `fileName`, bytes are returned instead of creating a file
  * If this method is called from a browser then it will return a HTML link that you can append in your page
  * This link will enable the generated MIDI as a downloadable file.
  * @param {Number | null} bpm If a value is provided, the generated midi file will be set to this bpm value.
  */
export const midi: (notes: NoteObject[], fileName?: string | null, bpm?: number | undefined) => string | HTMLAnchorElement | undefined;

